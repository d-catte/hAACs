import { BasicScreen } from "../../basic_screen.slint";
import { HomeButton } from "../../widgets/home_button/home_button.slint";
import { Button } from "std-widgets.slint";
import { AACCallback } from "../../callback/aac_callbacks.slint";
import { CarouselTheme } from "../../widgets/carousel/carousel_theme.slint";
import { ComboBox, ProgressIndicator } from "std-widgets.slint";

export global LetterGameData {
    in-out property <[string]> chars: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
    in-out property <bool> game_started: false;
    in-out property <string> current_word;
    in-out property <string> current_letters;
    in-out property <int> difficulty: 1;
    in-out property <string> score: "0";
    pure callback game_start();
    pure callback letter_pressed(string);
    pure callback match_win();
    pure callback game_over();
}

export component LetterButton inherits Rectangle {
    in property <string> char;

    height: 60px;
    width: 60px;
    background: touch.pressed ? #e0e0e0 : #636363;
    border-radius: 4px;

    touch := TouchArea {
        width: 100%;
        height: 100%;
        clicked => {
            LetterGameData.letter_pressed(char);
        }

        Text {
            text: char;
            font-family: CarouselTheme.font-family-mono;
            font-size: self.width - 10px;
            width: 100%;
            height: 100%;
            horizontal-alignment: center;
            vertical-alignment: center;
            letter-spacing: 2px;
            x: 0px;
            y: -3px;
        }
    }
}


export component AlphabetGame inherits BasicScreen {

    HomeButton {
        clicked => {
            LetterGameData.game_over();
            root.return_to_main_menu();
        }
    }

    property <float> time_remaining: 1.0;

    timer := Timer {
        interval: 60s;
        running: LetterGameData.game_started;
        triggered() => {
            LetterGameData.game_over();
            time_remaining = 1.0;
        }
    }

    Timer {
        interval: 1s;
        running: LetterGameData.game_started;
        triggered() => {
            time_remaining = time_remaining - (1/60);
        }
    }

    if !LetterGameData.game_started: Text {
        x: 400px;
        y: 20px;
        text: "Speed Speller";
        font-size: 40px;
        horizontal-alignment: center;
    }

    if !LetterGameData.game_started: Button {
        text: "Start";
        width: 150px;
        height: 100px;
        clicked => {
            LetterGameData.game_start();
            LetterGameData.game_started = true;
        }
    }

    if !LetterGameData.game_started: ComboBox {
        x: 500px;
        y: 200px;
        model: ["1", "2", "3"];
        current-value: "1";
        selected(current-value) => {
            if (current-value == "1") {
                LetterGameData.difficulty = 1;
            } else if (current-value == "2") {
                LetterGameData.difficulty = 2;
            } else {
                LetterGameData.difficulty = 3;
            }
        }
    }

    if !LetterGameData.game_started: Text {
        x: 400px;
        y: 200px;
        text: "Difficulty: ";
        font-size: 20px;
    }

    if !LetterGameData.game_started: Text {
        x: 430px;
        y: 400px;
        text: "Score: ";
        font-size: 20px;
    }

    if !LetterGameData.game_started: Text {
        x: 500px;
        y: 400px;
        text <=> LetterGameData.score;
        font-size: 20px;
    }

    if LetterGameData.game_started: Button {
        x: 450px;
        y: 20px;
        width: 100px;
        height: 50px;
        text: "Listen";
        clicked => {
            AACCallback.tts(LetterGameData.current_word);
        }
    }

    if LetterGameData.game_started: Text {
        x: 400px;
        y: 70px;
        width: 200px;
        height: 50px;
        text <=> LetterGameData.current_letters;
        font-size: 30px;
        horizontal-alignment: center;
    }

    for char[i] in LetterGameData.chars: LetterButton {
        visible: LetterGameData.game_started;
        char: char;
        width: 60px;
        height: 60px;
        x: (Math.mod(i, 13)) * 70px + 60px;
        y: Math.floor(i / 13) * 70px + 130px;
    }

    if LetterGameData.game_started: ProgressIndicator {
        width: 90%;
        height: 40px;
        x: 51px;
        y: 540px;
        progress: time_remaining;
    }
}