import { CarouselTheme } from "../carousel/carousel_theme.slint";
import { AACCallback } from "../../callback/aac_callbacks.slint";
import { Format } from "../../data/format.slint";
import { KeyboardCallback, Keyboard } from "../../callback/keyboard_callbacks.slint";
import { TextEdit } from "std-widgets.slint";

export component TextBox inherits Rectangle {
    in-out property <bool> editing: false;
    in-out property <bool> usb_editing: false;
    in-out property <string> text_value <=> AACCallback.text;
    property <string> cached_cursor_visible_text <=> AACCallback.visible_cursor_text;
    property <string> cached_cursor_invisible_text <=> AACCallback.invisible_cursor_text;
    property <bool> cursor_visible: false;
    property <int> cursor_index <=> AACCallback.cursor_index;

    border-width: 2px;
    border-color: (editing || usb_editing) ? red : CarouselTheme.background-regular;

    Timer {
        running: editing;
        interval: 500ms;
        triggered => {
            cursor_visible = !cursor_visible;
        }
    }

    if KeyboardCallback.current_keyboard == Keyboard.None: text_edit := TextEdit {
        width: 100%;
        height: 100%;
        text <=> text_value;
        font-size: Format.aac_font_size;
        wrap: word-wrap;

        changed has-focus => {
            usb_editing = text_edit.has-focus;
        }
    }

    if KeyboardCallback.current_keyboard != Keyboard.None: Text {
        text: editing ? (cursor_visible ? cached_cursor_visible_text : cached_cursor_invisible_text) : text_value;
        font-size: Format.aac_font_size;
        width: 95%;
        height: 95%;
    }
    
    if KeyboardCallback.current_keyboard != Keyboard.None: TouchArea {
        width: 100%;
        height: 100%;
        
        clicked => {
           editing = true;
           cursor_index = text_value.character-count;
           KeyboardCallback.character_typed("Space");
           KeyboardCallback.character_typed("Delete");
           open_keyboard(text_value);
        }
    }
    
    callback open_keyboard(current_string: string);

    public function push_string(new_string: string) {
        text_value = new-string;
    }
    
    public function on_keyboard_close() {
        editing = false;
        usb_editing = false;
    }

    public function move_cursor(offset: int) {
        if (offset + cursor_index <= text_value.character-count && offset + cursor_index >= 0) {
            cursor_index += offset;
            AACCallback.cursor_moved();
        }
    }
}